/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.ActivityOccurrenceCreationFailure;
import com.knetikcloud.model.ActivityOccurrenceResource;
import com.knetikcloud.model.ActivityOccurrenceResults;
import com.knetikcloud.model.ActivityOccurrenceResultsResource;
import com.knetikcloud.model.ActivityResource;
import com.knetikcloud.model.PageResourceBareActivityResource;
import com.knetikcloud.model.PageResourceTemplateResource;
import com.knetikcloud.model.Result;
import com.knetikcloud.model.TemplateResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActivitiesApi
 */
@Ignore
public class ActivitiesApiTest {

    private final ActivitiesApi api = new ActivitiesApi();

    
    /**
     * Create an activity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createActivityTest() throws ApiException {
        ActivityResource activityResource = null;
        ActivityResource response = api.createActivity(activityResource);

        // TODO: test validations
    }
    
    /**
     * Create a new activity occurrence. Ex: start a game
     *
     * Has to enforce extra rules if not used as an admin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createActivityOccurrenceTest() throws ApiException {
        Boolean test = null;
        ActivityOccurrenceResource activityOccurrenceResource = null;
        ActivityOccurrenceResource response = api.createActivityOccurrence(test, activityOccurrenceResource);

        // TODO: test validations
    }
    
    /**
     * Create a activity template
     *
     * Activity Templates define a type of activity and the properties they have
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createActivityTemplateTest() throws ApiException {
        TemplateResource activityTemplateResource = null;
        TemplateResource response = api.createActivityTemplate(activityTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Delete an activity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteActivityTest() throws ApiException {
        Long id = null;
        api.deleteActivity(id);

        // TODO: test validations
    }
    
    /**
     * Delete a activity template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteActivityTemplateTest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteActivityTemplate(id, cascade);

        // TODO: test validations
    }
    
    /**
     * List activity definitions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivitiesTest() throws ApiException {
        Boolean filterTemplate = null;
        String filterName = null;
        String filterId = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceBareActivityResource response = api.getActivities(filterTemplate, filterName, filterId, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single activity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivityTest() throws ApiException {
        Long id = null;
        ActivityResource response = api.getActivity(id);

        // TODO: test validations
    }
    
    /**
     * Get a single activity template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivityTemplateTest() throws ApiException {
        String id = null;
        TemplateResource response = api.getActivityTemplate(id);

        // TODO: test validations
    }
    
    /**
     * List and search activity templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivityTemplatesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceTemplateResource response = api.getActivityTemplates(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setActivityOccurrenceResultsTest() throws ApiException {
        Long activityOccurrenceId = null;
        ActivityOccurrenceResultsResource activityOccurrenceResults = null;
        ActivityOccurrenceResults response = api.setActivityOccurrenceResults(activityOccurrenceId, activityOccurrenceResults);

        // TODO: test validations
    }
    
    /**
     * Update an activity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateActivityTest() throws ApiException {
        Long id = null;
        ActivityResource activityResource = null;
        ActivityResource response = api.updateActivity(id, activityResource);

        // TODO: test validations
    }
    
    /**
     * Updated the status of an activity occurrence
     *
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateActivityOccurrenceTest() throws ApiException {
        Long activityOccurrenceId = null;
        String activityCccurrenceStatus = null;
        api.updateActivityOccurrence(activityOccurrenceId, activityCccurrenceStatus);

        // TODO: test validations
    }
    
    /**
     * Update an activity template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateActivityTemplateTest() throws ApiException {
        String id = null;
        TemplateResource activityTemplateResource = null;
        TemplateResource response = api.updateActivityTemplate(id, activityTemplateResource);

        // TODO: test validations
    }
    
}
