/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.ChatBlacklistResource;
import com.knetikcloud.model.ChatMessageResource;
import com.knetikcloud.model.PageResourceChatMessageResource;
import com.knetikcloud.model.PageResourceChatUserThreadResource;
import com.knetikcloud.model.Result;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChatApi
 */
@Ignore
public class ChatApiTest {

    private final ChatApi api = new ChatApi();

    
    /**
     * Acknowledge number of messages in a thread
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acknowledgeChatMessageTest() throws ApiException {
        String id = null;
        Integer readCount = null;
        api.acknowledgeChatMessage(id, readCount);

        // TODO: test validations
    }
    
    /**
     * Add a user to a chat message blacklist
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addChatMessageBlacklistTest() throws ApiException {
        Integer blacklistedUserId = null;
        String id = null;
        api.addChatMessageBlacklist(blacklistedUserId, id);

        // TODO: test validations
    }
    
    /**
     * Delete a message
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatMessageTest() throws ApiException {
        String id = null;
        api.deleteChatMessage(id);

        // TODO: test validations
    }
    
    /**
     * Edit your message
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editChatMessageTest() throws ApiException {
        String id = null;
        ChatMessageResource chatMessageResource = null;
        api.editChatMessage(id, chatMessageResource);

        // TODO: test validations
    }
    
    /**
     * Get a message
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatMessageTest() throws ApiException {
        String id = null;
        ChatMessageResource response = api.getChatMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get a list of blocked users for chat messaging
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatMessageBlacklistTest() throws ApiException {
        String id = null;
        List<ChatBlacklistResource> response = api.getChatMessageBlacklist(id);

        // TODO: test validations
    }
    
    /**
     * List your threads
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatThreadsTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceChatUserThreadResource response = api.getChatThreads(size, page, order);

        // TODO: test validations
    }
    
    /**
     * List messages with a user
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirectMessagesTest() throws ApiException {
        Integer id = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceChatMessageResource response = api.getDirectMessages(id, size, page, order);

        // TODO: test validations
    }
    
    /**
     * List messages in a thread
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThreadMessagesTest() throws ApiException {
        String id = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceChatMessageResource response = api.getThreadMessages(id, size, page, order);

        // TODO: test validations
    }
    
    /**
     * List messages in a topic
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopicMessagesTest() throws ApiException {
        String id = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceChatMessageResource response = api.getTopicMessages(id, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Remove a user from a blacklist
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeChatBlacklistTest() throws ApiException {
        Integer blacklistedUserId = null;
        String id = null;
        api.removeChatBlacklist(blacklistedUserId, id);

        // TODO: test validations
    }
    
    /**
     * Send a message
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendChatMessageTest() throws ApiException {
        ChatMessageResource chatMessageResource = null;
        ChatMessageResource response = api.sendChatMessage(chatMessageResource);

        // TODO: test validations
    }
    
}
