/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.NewPasswordRequest;
import com.knetikcloud.model.PageResourceTemplateResource;
import com.knetikcloud.model.PageResourceUserBaseResource;
import com.knetikcloud.model.PasswordResetRequest;
import com.knetikcloud.model.Result;
import com.knetikcloud.model.TemplateResource;
import com.knetikcloud.model.UserResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Add a tag to a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTagTest() throws ApiException {
        Integer userId = null;
        String tag = null;
        api.addUserTag(userId, tag);

        // TODO: test validations
    }
    
    /**
     * Create a user template
     *
     * User Templates define a type of user and the properties they have
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTemplateTest() throws ApiException {
        TemplateResource userTemplateResource = null;
        TemplateResource response = api.createUserTemplate(userTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Delete a user template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTemplateTest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteUserTemplate(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Get a single user
     *
     * Additional private info is included as USERS_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String id = null;
        UserResource response = api.getUser(id);

        // TODO: test validations
    }
    
    /**
     * List tags for a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTagsTest() throws ApiException {
        Integer userId = null;
        List<String> response = api.getUserTags(userId);

        // TODO: test validations
    }
    
    /**
     * Get a single user template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTemplateTest() throws ApiException {
        String id = null;
        TemplateResource response = api.getUserTemplate(id);

        // TODO: test validations
    }
    
    /**
     * List and search user templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTemplatesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceTemplateResource response = api.getUserTemplates(size, page, order);

        // TODO: test validations
    }
    
    /**
     * List and search users
     *
     * Additional private info is included as USERS_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String filterDisplayname = null;
        String filterEmail = null;
        String filterFirstname = null;
        String filterFullname = null;
        String filterLastname = null;
        String filterUsername = null;
        String filterTag = null;
        String filterGroup = null;
        String filterRole = null;
        String filterSearch = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceUserBaseResource response = api.getUsers(filterDisplayname, filterEmail, filterFirstname, filterFullname, filterLastname, filterUsername, filterTag, filterGroup, filterRole, filterSearch, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Choose a new password after a reset
     *
     * Finish resetting a user&#39;s password using the secret provided from the password-reset endpoint.  Password should be in plain text and will be encrypted on receipt. Use SSL for security.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void passwordResetTest() throws ApiException {
        Integer id = null;
        NewPasswordRequest newPasswordRequest = null;
        api.passwordReset(id, newPasswordRequest);

        // TODO: test validations
    }
    
    /**
     * Register a new user
     *
     * Password should be in plain text and will be encrypted on receipt. Use SSL for security
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        UserResource userResource = null;
        UserResource response = api.registerUser(userResource);

        // TODO: test validations
    }
    
    /**
     * Remove a tag from a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserTagTest() throws ApiException {
        Integer userId = null;
        String tag = null;
        api.removeUserTag(userId, tag);

        // TODO: test validations
    }
    
    /**
     * Set a user&#39;s password
     *
     * Password should be in plain text and will be encrypted on receipt. Use SSL for security.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPasswordTest() throws ApiException {
        Integer id = null;
        String password = null;
        api.setPassword(id, password);

        // TODO: test validations
    }
    
    /**
     * Reset a user&#39;s password
     *
     * A reset code will be generated and a &#39;forgot_password&#39; BRE event will be fired with that code.  The default system rule will send an email to the selected user if an email service has been setup. You can modify that rule in BRE to send an SMS instead or any other type of notification as you see fit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startPasswordResetTest() throws ApiException {
        Integer id = null;
        api.startPasswordReset(id);

        // TODO: test validations
    }
    
    /**
     * Reset a user&#39;s password without user id
     *
     * A reset code will be generated and a &#39;forgot_password&#39; BRE event will be fired with that code.  The default system rule will send an email to the selected user if an email service has been setup. You can modify that rule in BRE to send an SMS instead or any other type of notification as you see fit.  Must submit their email, username, or mobile phone number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitPasswordResetTest() throws ApiException {
        PasswordResetRequest passwordReset = null;
        api.submitPasswordReset(passwordReset);

        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * Password will not be edited on this endpoint, use password specific endpoints.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        UserResource userResource = null;
        api.updateUser(id, userResource);

        // TODO: test validations
    }
    
    /**
     * Update a user template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTemplateTest() throws ApiException {
        String id = null;
        TemplateResource userTemplateResource = null;
        TemplateResource response = api.updateUserTemplate(id, userTemplateResource);

        // TODO: test validations
    }
    
}
